# This property determines whether a circuit breaker will be used to track health and to short-circuit requests if it trips.
hystrix.command.default.circuitBreaker.enabled=true

# This property sets the minimum number of requests in a rolling window that will trip the circuit.
hystrix.command.default.circuitBreaker.requestVolumeThreshold=20

# This property sets the amount of time, after tripping the circuit, to reject requests before allowing attempts again to determine if the circuit should again be closed.
hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds=5000

# This property sets the error percentage at or above which the circuit should trip open and start short-circuiting requests to fallback logic.
hystrix.command.default.circuitBreaker.errorThresholdPercentage=50

# This property, if true, forces the circuit breaker into an open (tripped) state in which it will reject all requests.
hystrix.command.default.circuitBreaker.forceOpen=false

# This property, if true, forces the circuit breaker into a closed state in which it will allow requests regardless of the error percentage.
hystrix.command.default.circuitBreaker.forceClosed=false

# This property sets the duration of the statistical rolling window, in milliseconds. This is how long Hystrix keeps metrics for the circuit breaker to use and for publishing.
hystrix.command.default.metrics.rollingStats.timeInMilliseconds=10000

# This property sets the number of buckets the rolling statistical window is divided into.
hystrix.command.default.metrics.rollingStats.numBuckets=10

# This property indicates whether execution latencies should be tracked and calculated as percentiles.
hystrix.command.default.metrics.rollingPercentile.enabled=true

# This property sets the number of buckets the rollingPercentile window will be divided into.
hystrix.command.default.metrics.rollingPercentile.numBuckets=6

# This property sets the maximum number of execution times that are kept per bucket. If more executions occur during the time they will wrap around and start over-writing at the beginning of the bucket.
hystrix.command.default.metrics.rollingPercentile.bucketSize=100

# This property sets the time to wait, in milliseconds, between allowing health snapshots to be taken that calculate success and error percentages and affect circuit breaker status.
hystrix.command.default.metrics.healthSnapshot.intervalInMilliseconds=500

# This property sets the core thread-pool size
hystrix.threadpool.default.coreSize=10

# Added in 1.5.9. This property sets the maximum thread-pool size. This is the maximum amount of concurrency that can be supported without starting to reject HystrixCommands. Please note that this setting only takes effect if you also set allowMaximumSizeToDivergeFromCoreSize.
hystrix.threadpool.default.maximumSize=10

# This property sets the maximum queue size of the BlockingQueue implementation. If you set this to -1 then SynchronousQueue will be used, otherwise a positive value will be used with LinkedBlockingQueue.
hystrix.threadpool.default.maxQueueSize=-1

# This property sets the queue size rejection threshold â€” an artificial maximum queue size at which rejections will occur even if maxQueueSize has not been reached. This property exists because the maxQueueSize of a BlockingQueue cannot be dynamically changed and we want to allow you to dynamically change the queue size that affects rejections.
hystrix.threadpool.default.queueSizeRejectionThreshold=5

# This property sets the keep-alive time, in minutes.
hystrix.threadpool.default.keepAliveTimeMinutes=1

#  This property allows the configuration for maximumSize to take effect. That value can then be equal to, or higher, than coreSize. Setting coreSize < maximumSize creates a thread pool which can sustain maximumSize concurrency, but will return threads to the system during periods of relative inactivity.
hystrix.threadpool.default.allowMaximumSizeToDivergeFromCoreSize=false

# This property sets the duration of the statistical rolling window, in milliseconds. This is how long metrics are kept for the thread pool.
hystrix.threadpool.default.metrics.rollingStats.timeInMilliseconds=10000


